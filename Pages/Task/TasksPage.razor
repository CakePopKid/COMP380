@page "/tasks"
@using Blazorise.DataGrid
@using ProjectManagementSystem.Data.Tasks
@inject TaskService TaskService


@code {
    List<Tasks> tasks;
    Tasks task = new Tasks();
    List<string> predecessorTaskTempList = new List<string>();
    List<string> successorTaskTempList = new List<string>();
    List<string> issueTempList = new List<string>();
    List<string> summaryTasksTempList = new List<string>();
    List<string> groupTaskTempList = new List<string>();
    string predecessorTask;
    string successorTask;
    string issue;
    string groupTask;
    bool taskList;
    bool taskDetails;
    bool createTask;
    bool success;

    protected override async Task OnInitializedAsync()
    {
        tasks = await TaskService.GetTasksAsync();
        taskList = true;
        taskDetails = false;
        createTask = false;

        //Create our temporary issue list
        CreateIssueList();
    }



    private void CreateIssueList()
    {
        issueTempList.Add("Issue 1");
        issueTempList.Add("Issue 2");
        issueTempList.Add("Issue 3");
        issueTempList.Add("Issue 4");
    }


    private void OnEditClick(Guid taskId)
    {
        //set our view
        taskList = false;
        taskDetails = true;
        createTask = false;
        success = false;

        //get the task details we want to show from our list of tasks
        this.task = this.tasks.Find(x => x.Id.Equals(taskId));

        OnExpectedEndDateChange(this.task.ExpectedEndDate);
        OnActualEndDateChange(this.task.ActualEndDate);
        
        task.PercentCompleted = task.PercentCompleted ?? "0%";

        foreach (var task in tasks)
        {
            var successorTaskName = this.task.SuccessorTasks.Find(x => x.Equals(task.Name));
            if (task.Name != successorTaskName && task.Name != this.task.Name)
            {
                successorTaskTempList.Add(task.Name);
            }
            var predecessorTaskName = this.task.PredecessorTasks.Find(x => x.Equals(task.Name));
            if (task.Name != predecessorTaskName && task.Name != this.task.Name)
            {
                predecessorTaskTempList.Add(task.Name);
            }
        }

        summaryTasksTempList.Add(string.Empty);
        foreach (var task in tasks)
        {
            if (task.TaskType == TaskType.Summary && task.Name != this.task.Name)
            {
                summaryTasksTempList.Add(task.Name);
            }
        }

        foreach (var task in tasks)
        {
            if (task.Name != this.task.Name)
            {
                groupTaskTempList.Add(task.Name);
            }
        }
    }

    private void OnExpectedEndDateChange(DateTime? endDate)
    {
        this.task.ExpectedEndDate = endDate;
        if (this.task.ExpectedStartDate != null)
        {
            var expectedTimeDifference = this.task.ExpectedEndDate.Value - this.task.ExpectedStartDate.Value;
            this.task.ExpectedDuration = ((int)expectedTimeDifference.TotalDays).ToString() + " day(s)";
        }
        else
        {
            this.task.ExpectedDuration = "0 days";
        }
    }

    private void OnActualEndDateChange(DateTime? endDate)
    {
        this.task.ActualEndDate = endDate;
        if (this.task.ActualStartDate != null)
        {
            var actualTimeDifference = this.task.ActualEndDate.Value - this.task.ActualStartDate.Value;
            this.task.ActualDuration = ((int)actualTimeDifference.TotalDays).ToString() + " day(s)";
        }
        else
        {
            this.task.ActualDuration = "0 days";
        }
    }

    private void OnCreateTaskClick()
    {
        taskList = false;
        taskDetails = false;
        createTask = true;
    }

    private void ClickBack()
    {
        taskList = true;
        taskDetails = false;
        createTask = false;
    }

    private void ClickSave()
    {
        //find the existing task and set it equal to the updated task
        tasks[tasks.FindIndex(x => x.Equals(task))] = task;
        success = true;
    }

    private void OnDeleteClick(Guid Id)
    {
        tasks.RemoveAll(x => x.Id == Id);
    }

    private void OnAddPredecessorTaskClick()
    {
        if (predecessorTask == null)
        {
            return;
        }
        this.task.PredecessorTasks.Add(predecessorTask);
        this.predecessorTaskTempList.Remove(predecessorTask);
        predecessorTask = null;
    }

    private void OnAddSuccessorTaskClick()
    {
        if (successorTask == null)
        {
            return;
        }
        this.task.SuccessorTasks.Add(successorTask);
        this.successorTaskTempList.Remove(successorTask);
        successorTask = null;
    }

    private void OnAddIssueClick()
    {
        if (issue == null)
        {
            return;
        }
        this.task.ListOfIssues.Add(issue);
        this.issueTempList.Remove(issue);
        issue = null;
    }

    private void OnAddGroupTaskClick()
    {
        if (groupTask == null)
        {
            return;
        }
        this.task.GroupOtherTasks.Add(groupTask);
        this.groupTaskTempList.Remove(groupTask);
        groupTask = null;
    }
}



@if (this.tasks == null)
{
    <h1>Loading...</h1>
}
else if (this.tasks.Count == 0)
{
    <h1>There are no tasks</h1>
}
else if (taskList)
{
    <div class="container-fluid">
        <h1>Tasks List</h1>
        <div class="list-table">
            <DataGrid TItem="Tasks" Data="@tasks" Sortable="true" Filterable="true" ShowPager="true" PageSize="20" Striped="true" Borderless="true" Bordered="true" Editable="true">
                <DataGridColumn TItem="Tasks" Field="@nameof(Tasks.Name)" Caption="Name"></DataGridColumn>
                <DataGridColumn TItem="Tasks" Field="@nameof(Tasks.ResourceAssigned)" Caption="Assigned Resource"></DataGridColumn>
                <DataGridColumn TItem="Tasks" Field="@nameof(Tasks.ExpectedStartDate)" Caption="Expected Start Date"></DataGridColumn>
                <DataGridColumn TItem="Tasks" Field="@nameof(Tasks.ExpectedEndDate)" Caption="Expected End Date"></DataGridColumn>
                <DataGridColumn TItem="Tasks" Field="@nameof(Tasks.TaskType)" Caption="Type"></DataGridColumn>
                <DataGridCommandColumn TItem="Tasks">
                    <NewCommandTemplate Context="task"></NewCommandTemplate>
                    <EditCommandTemplate Context="task"><Button Color="Color.Primary" Clicked="@(e=> OnEditClick(task.Item.Id))">Edit</Button></EditCommandTemplate>
                    <DeleteCommandTemplate Context="task"><Button Color="Color.Danger" Clicked="@(e=> OnDeleteClick(task.Item.Id))">Delete</Button></DeleteCommandTemplate>
                </DataGridCommandColumn>
            </DataGrid>
        </div>
        <div style="padding-top:1em;">
            <Button Color="Color.Secondary" Clicked="@OnCreateTaskClick" class="create-button">Create Task</Button>
        </div>
    </div>
}
else if (taskDetails)
{
    <div class="container-fluid">
        <h1>Task Details</h1>
        <div style="padding-bottom:1em;">
            <Button class="back-button" @onclick="ClickBack">Back</Button>
        </div>

        <div class="list-table">

            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Name</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <TextEdit @bind-Text="@task.Name" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Description</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is10">
                    <TextEdit @bind-Text="@task.Description" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Resource Assigned</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <Select TValue="string" @bind-SelectedValue="@this.task.ResourceAssigned">
                        @foreach (var resource in @tasks)
                        {
                            <SelectItem Value="resource.ResourceAssigned">@resource.ResourceAssigned</SelectItem>
                        }
                    </Select>
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Task Type</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <Select TValue="TaskType" @bind-SelectedValue="@this.task.TaskType">
                        <SelectItem Value="@this.task.TaskType">@this.task.TaskType</SelectItem>
                        @if (TaskType.Milestone != this.task.TaskType)
                        {
                            <SelectItem Value="TaskType.Milestone">@TaskType.Milestone</SelectItem>
                        }
                        @if (TaskType.Regular != this.task.TaskType)
                        {
                            <SelectItem Value="TaskType.Regular">@TaskType.Regular</SelectItem>
                        }
                        @if (TaskType.Summary != this.task.TaskType)
                        {
                            <SelectItem Value="TaskType.Summary">@TaskType.Summary</SelectItem>
                        }
                    </Select>
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Expected Start Date</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <DateEdit TValue="DateTime?" @bind-Date="@this.task.ExpectedStartDate" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Expected End Date</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <DateEdit TValue="DateTime?" Date="@this.task.ExpectedEndDate" DateChanged="@OnExpectedEndDateChange" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Expected Duration</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <TextEdit ReadOnly="true" @bind-Text="@this.task.ExpectedDuration" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Expected Effort</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <TextEdit @bind-Value="@this.task.ExpectedEffort" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Actual Start Date</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <DateEdit TValue="DateTime?" @bind-Date="@this.task.ActualStartDate" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Actual End Date</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <DateEdit TValue="DateTime?" Date="@this.task.ActualEndDate" DateChanged="@OnActualEndDateChange"/>
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Actual Duration</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <TextEdit ReadOnly="true" @bind-Value="@this.task.ActualDuration" />                    
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Effort Completed</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <TextEdit @bind-Value="@this.task.EffortCompleted" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Actual Effort</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <TextEdit @bind-Value="@this.task.ActualEffort" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Percent Completed</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.IsAuto">
                    <TextEdit @bind-Text="@this.task.PercentCompleted" />
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Predecessor Tasks</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is3">
                    <Select TValue="string" @bind-SelectedValue="@predecessorTask">
                        <SelectItem Value="@predecessorTask">@predecessorTask</SelectItem>
                        @foreach (var item in predecessorTaskTempList)
                        {
                            <SelectItem Value="item">@item</SelectItem>
                        }
                    </Select>
                </FieldBody>
                <Button Color="Color.Primary" Clicked="OnAddPredecessorTaskClick">Add</Button>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is3">
                    <Select Multiple="true" TValue="string" SelectedValue="@this.predecessorTask">
                        @foreach (var item in task.PredecessorTasks)
                        {
                            <SelectItem Value="@item">@item</SelectItem>
                        }
                    </Select>
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Successor Tasks</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is3">
                    <Select TValue="string" @bind-SelectedValue="@successorTask">
                        <SelectItem Value="@successorTask">@successorTask</SelectItem>
                        @foreach (var item in successorTaskTempList)
                        {
                            <SelectItem Value="item">@item</SelectItem>
                        }
                    </Select>
                </FieldBody>
                <Button Color="Color.Primary" Clicked="OnAddSuccessorTaskClick">Add</Button>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is3">
                    <Select Multiple="true" TValue="string" SelectedValue="@this.successorTask">
                        @foreach (var item in task.SuccessorTasks)
                        {
                            <SelectItem Value="@item">@item</SelectItem>
                        }
                    </Select>
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Issues</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is3">
                    <Select TValue="string" @bind-SelectedValue="@issue">
                        <SelectItem Value="@issue">@issue</SelectItem>
                        @foreach (var item in issueTempList)
                        {
                            <SelectItem Value="item">@item</SelectItem>
                        }
                    </Select>
                </FieldBody>
                <Button Color="Color.Primary" Clicked="OnAddIssueClick">Add</Button>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is3">
                    <Select Multiple="true" TValue="string" SelectedValue="@this.issue">
                        @foreach (var item in task.ListOfIssues)
                        {
                            <SelectItem Value="@item">@item</SelectItem>
                        }
                    </Select>
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Parent Summary Task</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is3">
                    <Select TValue="string" @bind-SelectedValue="@this.task.ParentSummaryTask">
                        @foreach (var task in summaryTasksTempList)
                        {
                            <SelectItem Value="task">@task</SelectItem>
                        }
                    </Select>
                </FieldBody>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2">Group Tasks</FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is3">
                    <Select TValue="string" @bind-SelectedValue="@this.groupTask">
                        <SelectItem Value="@this.groupTask">@this.groupTask</SelectItem>
                        @foreach (var item in groupTaskTempList)
                        {
                            <SelectItem Value="item">@item</SelectItem>
                        }
                    </Select>
                </FieldBody>
                <Button Color="Color.Primary" Clicked="OnAddGroupTaskClick">Add</Button>
            </Field>
            <Field Horizontal="true">
                <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
                <FieldBody ColumnSize="ColumnSize.Is3">
                    <Select Multiple="true" TValue="string" SelectedValue="@this.groupTask">
                        @foreach (var item in task.GroupOtherTasks)
                        {
                            <SelectItem Value="@item">@item</SelectItem>
                        }
                    </Select>
                </FieldBody>
            </Field>
        </div>
        <div style="padding-top:1em; padding-bottom:2em;">
            <Button class="back-button" @onclick="ClickBack">Back</Button>
            @if (!success)
            {
                <Button class="save-button" @onclick="ClickSave">Save</Button>
            }
            else
            {
                <Button class="save-button" @onclick="ClickSave">Save Successful</Button>
            }
        </div>

    </div>
}
else if (createTask)
{
    <div class="container-fluid">
        <h1>Create Task</h1>

        <div style="padding-top:1em; padding-bottom:2em;">
            <Button class="back-button" @onclick="ClickBack">Back</Button>
            @if (!success)
            {
                <Button class="save-button" @onclick="ClickSave">Save</Button>
            }
            else
            {
                <Button class="save-button" @onclick="ClickSave">Save Successful</Button>
            }

        </div>
    </div>
}



