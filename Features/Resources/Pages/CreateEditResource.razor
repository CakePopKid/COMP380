@page "/resources/{ResourceId:guid}"
@page "/resources/create"
@using ProjectManagementSystem.Features.Skills
@inject ResourceService ResourceService
@inject SkillService SkillService

@code {
    [Parameter]
    public Guid ResourceId { get; set; }

    Resource resource = new Resource();
    List<Skill> skills = new List<Skill>();
    List<Skill> skillTempList = new List<Skill>();
    Guid skillId;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        //If ResourceId is not empty, we know this is edit and we want to get the resource details
        if (ResourceId != Guid.Empty)
        {
            resource = await ResourceService.GetResourceById(ResourceId);
            skills = await SkillService.GetSkills();
        }
        CreateTempSkillList();
    }

    private void CreateTempSkillList()
    {
        // Get our current resource skills associated to the resource
        var resourceSkillList = resource.ResourceSkill.ToList();

        // Iterate through every skill and only add skills to our temp list that is not in our current resource skill list
        for (var i = 0; i < skills.Count; i++)
        {
            var resourceSkill = new ResourceSkill();

            if (i < resourceSkillList.Count)
            {
                resourceSkill = resourceSkillList[i];
            }

            if (skills[i].Id != resourceSkill?.SkillId)
            {
                skillTempList.Add(skills[i]);
            }
        }
    }

    private void OnAddSkillClick()
    {
        // We do not want to add an empty guid
        if (skillId == Guid.Empty)
        {
            return;
        }

        // Get the skill from our temp list based off the selected skillId
        var skill = skillTempList.Find(x => x.Id == skillId);

        // Add the ResourceSkill data to our resource.ResourceSkill list
        resource.ResourceSkill.Add(new ResourceSkill { ResourceId = resource.Id, SkillId = skill.Id });

        // Remove the skill from our temp list because we don't want the user to add it again
        skillTempList.Remove(skill);

        // Set the skillId to empty so we display Select...
        skillId = Guid.Empty;
    }

    private void OnRemoveSkillClick()
    {
        var resourceSkills = resource.ResourceSkill.ToList();

        foreach (var resourceSkill in resourceSkills)
        {
            var skillToAdd = skills.Find(x => x.Id == resourceSkill.SkillId);
            skillTempList.Add(skillToAdd);
            resource.ResourceSkill.Remove(resourceSkill);
        }
    }

    private void ValidateNameExists(ValidatorEventArgs n)
    {
        var name = Convert.ToString(n.Value);

        n.Status = string.IsNullOrEmpty(name) ? ValidationStatus.None : ValidationStatus.Success;
    }
}

<div class="container-fluid">
    @if (ResourceId != Guid.Empty)
    {
        <h1>Edit Resource</h1>
    }
    else
    {
        <h1>Create Resource</h1>
    }

<div class="list-table">
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Name</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is2">
            <Validation Validator="@ValidateNameExists">
                <TextEdit @bind-Text="@resource.Name">
                    <Feedback>
                        <ValidationNone>Name is required</ValidationNone>
                    </Feedback>
                </TextEdit>
            </Validation>
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Title</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is2">
            <TextEdit @bind-Text="@resource.Title" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Pay Rate</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <NumericEdit @bind-Value="@resource.PayRate" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Skill and Level</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is2">
            <Select TValue="Guid" @bind-SelectedValue="@skillId">
                @if (skillId == Guid.Empty)
                {
                    <SelectItem Value="@skillId">Select Skill...</SelectItem>
                }
                @foreach (var skill in skillTempList)
                {
                    <SelectItem Value="skill.Id">@skill.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <FieldBody ColumnSize="ColumnSize.Is2">
            <Select TValue="Guid" @bind-SelectedValue="@skillId">
                @if (skillId == Guid.Empty)
                {
                    <SelectItem Value="@skillId">Select Skill Level...</SelectItem>
                }               
                    <SelectItem Value="resource.ResourceSkill">@SkillLevel.Low</SelectItem>
                    <SelectItem Value="resource.ResourceSkill">@SkillLevel.Medium</SelectItem>
                    <SelectItem Value="resource.ResourceSkill">@SkillLevel.High</SelectItem>
                }
            </Select>
        </FieldBody>
        <Button Color="Color.Primary" Clicked="OnAddSkillClick">Add</Button>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is4">
            <Select Multiple="true" TValue="Guid" @bind-SelectedValue="@skillId">
                @foreach (var skill in resource.ResourceSkill)
                {
                    //Need to get the name of the skill so let's search for it by the skill id in our skills list
                    var skillData = skills.Find(x => x.Id == skill.SkillId);
                    <SelectItem Value="@skill.SkillId">@skillData.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <div>
            <Button Color="Color.Danger" Clicked="OnRemoveSkillClick">Remove All</Button>
        </div>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Availability Calendar</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" @bind-Values="@resource.AvailabilityCalendar" />
        </FieldBody>
    </Field>
</div>
</div>
