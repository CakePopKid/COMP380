@page "/ActionItem/{ActionItemId:guid}"
@page "/ActionItem/create"
@using ProjectManagementSystem.Features.ActionItems.Models
@using ProjectManagementSystem.Features.Resources
@using ProjectManagementSystem.Features.Issues
@using ProjectManagementSystem.Data
@using ProjectManagementSystem.Features.Shared
@inject ActionItemService ActionItemService
@inject ResourceService ResourceService
@inject IssueService IssueService
@inject NavigationManager navigation
@inject ApplicationDbContext db


@code {
    [Parameter]
    public Guid ActionItemId { get; set; }

    ActionItemModel action_itemModel = new ActionItemModel();
    List<Tasks.Task> tasks = new List<Tasks.Task>();
    List<Resource> resources = new List<Resource>();
    List<Issue> issues = new List<Issue>();
    List<Issue> issueTempList = new List<Issue>();


    Guid issueId;

    bool success;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        //If TaskId is not empty, we know this is edit and we want to get the task details

        if (ActionItemId != Guid.Empty)
        {
            action_itemModel = await ActionItemService.GetActionItemById(ActionItemId);
            //if (action_itemModel.Resource == null)
            //{
            //    taskModel.Resource = new Resource();
            //}
        }

        //action_item = await ActionItemService.GetActionItemDataAsync();
        //resources = await ResourceService.GetResourcesAsync();
        //issues = await IssueService.GetIssuesDataAsync();

        //Create temp lists to give user options to select for multi select features
        CreateTempActionItemLists();

    }

    private void CreateTempActionItemLists()
    {


        //for (var i = 0; i < issues.Count; i++)
        //{
        //    TaskIssue associatedIssue = new TaskIssue();
        //    if (i < taskModel.Task.TaskIssue.Count)
        //    {
        //        associatedIssue = taskModel.Task.TaskIssue[i];
        //    }

        //    if (issues[i].Id != associatedIssue?.IssueId)
        //    {
        //        issueTempList.Add(issues[i]);
        //    }
        //}
    }

    private void Save()
    {
        int entriesSaved = 0;
        // If the name is empty, we cannot save because it is required
        if (string.IsNullOrEmpty(action_itemModel.ActionItem.Name))
        {
            return;
        }
        else if (ActionItemId != null)
        {
            // Save edited changes
            entriesSaved = db.SaveChanges();
        }
        else
        {
            // Save new changes
            entriesSaved = ActionItemService.SaveActionItem(action_itemModel.ActionItem);
        }

        if (entriesSaved > 0)
        {
            success = true;
        }
    }


    private void OnAddResourceClick()
    {
        //// We do not want to add an empty guid
        //if (issueId == Guid.Empty)
        //{
        //    return;
        //}

        //// Get the issue from our temp list based off the selected issueId
        //var issue = issueTempList.Find(x => x.Id == issueId);

        //// Add the TaskIssue data to our Task.TaskIssue list
        //taskModel.Task.TaskIssue.Add(new TaskIssue { TaskId = taskModel.Task.Id, Task = taskModel.Task, IssueId = issueId, Issue = issue });

        //// Remove the issue from our temp list because we don't want the user to add it again
        //issueTempList.Remove(issue);

        //// Set the issueId to empty so we display Select...
        //issueId = Guid.Empty;
    }

    private void OnRemoveResourceClick()
    {
        //var taskIssues = taskModel.Task.TaskIssue.ToList();

        //foreach (var taskIssue in taskIssues)
        //{
        //    issueTempList.Add(taskIssue.Issue);
        //    taskModel.Task.TaskIssue.Remove(taskIssue);
        //}
    }


    private void OnAddIssueClick()
    {
        // We do not want to add an empty guid
        if (issueId == Guid.Empty)
        {
            return;
        }

        // Get the issue from our temp list based off the selected issueId
        var issue = issueTempList.Find(x => x.Id == issueId);

        // Add the TaskIssue data to our Task.TaskIssue list
        // action_itemModel.ActionItem.TaskIssue.Add(new TaskIssue { TaskId = taskModel.Task.Id, Task = taskModel.Task, IssueId = issueId, Issue = issue });

        // Remove the issue from our temp list because we don't want the user to add it again
        issueTempList.Remove(issue);

        // Set the issueId to empty so we display Select...
        issueId = Guid.Empty;
    }

    private void OnRemoveIssuesClick()
    {
        //var action_itemIssues = action_itemModel.ActionItem.TaskIssue.ToList();

        //foreach (var taskIssue in taskIssues)
        //{
        //    issueTempList.Add(taskIssue.Issue);
        //    taskModel.Task.TaskIssue.Remove(taskIssue);
        //}
    }

    private void OnExpectedEndDateChange(DateTime? endDate)
    {
        //// Update duration on expected end date change
        //taskModel.Task.ExpectedEndDate = endDate;
        //if (taskModel.Task.ExpectedStartDate != null)
        //{
        //    var expectedTimeDifference = taskModel.Task.ExpectedEndDate.Value - taskModel.Task.ExpectedStartDate.Value;
        //    if ((int)expectedTimeDifference.TotalDays != 1)
        //    {
        //        taskModel.Task.ExpectedDuration = ((int)expectedTimeDifference.TotalDays).ToString() + " days";
        //    }
        //    else
        //    {
        //        taskModel.Task.ExpectedDuration = ((int)expectedTimeDifference.TotalDays).ToString() + " day";
        //    }
        //}
        //else
        //{
        //    taskModel.Task.ExpectedDuration = "0 days";
        //}
    }

    private void OnActualCompletionDateChange(DateTime? endDate)
    {
        //// Update duration on actual end date change
        //taskModel.Task.ActualEndDate = endDate;
        //if (taskModel.Task.ActualStartDate != null)
        //{
        //    var actualTimeDifference = taskModel.Task.ActualEndDate.Value - taskModel.Task.ActualStartDate.Value;
        //    if ((int)actualTimeDifference.TotalDays != 1)
        //    {
        //        taskModel.Task.ActualDuration = ((int)actualTimeDifference.TotalDays).ToString() + " days";
        //    }
        //    else
        //    {
        //        taskModel.Task.ActualDuration = ((int)actualTimeDifference.TotalDays).ToString() + " day";
        //    }
        //}
        //else
        //{
        //    taskModel.Task.ActualDuration = "0 days";
        //}
    }

    private void ValidateNameExists(ValidatorEventArgs n)
    {
        var name = Convert.ToString(n.Value);

        n.Status = string.IsNullOrEmpty(name) ? ValidationStatus.None : ValidationStatus.Success;
    }

    private void ClickBack()
    {
        navigation.NavigateTo("/ActionItem");
    }

    private void OnClearResourceClick()
    {
        //action_itemModel.ActionItem.ResourceId = Guid.Empty;
    }

    }

<div class="container-fluid">
    @if (ActionItemId != Guid.Empty)
    {
        <h1>Edit Action Item</h1>
    }
    else
    {
        <h1>Create New Action Item</h1>
    }

<div class="list-table">
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Name</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <Validation Validator="@ValidateNameExists">
                <TextEdit @bind-Text="@action_itemModel.ActionItem.Name">
                    <Feedback>
                        <ValidationNone>Name is required</ValidationNone>
                    </Feedback>
                </TextEdit>
            </Validation>
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Description</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit @bind-Text="@action_itemModel.ActionItem.Description" />
        </FieldBody>
    </Field>
    @*<Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Resource Assigned</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is2">
            <Select TValue="Guid?" @bind-SelectedValue="@action_itemModel.ActionItem.ResourceId">
                @if (action_itemModel.ActionItem.ResourceId == Guid.Empty)
                {
                    <SelectItem Value="@action_itemModel.ActionItem.ResourceId">Select...</SelectItem>
                }
                @foreach (var resource in resources)
                {
                    <SelectItem Value="resource.Id">@resource.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <Button Color="Color.Danger" Clicked="OnClearResourceClick">Remove</Button>
    </Field>*@
    
    @*<Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Expected Completion Date</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" @bind-Date="@action_itemModel.ActionItem.ExpectedCompletionDate" />
        </FieldBody>
    </Field>*@
    @*<Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Actual Completion Date</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" Date="@action_itemModel.ActionItem.ActualCompletionDate" DateChanged="@OnActualCompletionDateChange" />
        </FieldBody>
    </Field>*@
    

    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Issues</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <Select TValue="Guid" @bind-SelectedValue="@issueId">
                @if (issueId == Guid.Empty)
                {
                    <SelectItem Value="@issueId">Select...</SelectItem>
                }
                @foreach (var issue in issueTempList)
                {
                    <SelectItem Value="issue.Id">@issue.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <Button Color="Color.Primary" Clicked="OnAddIssueClick">Add</Button>
    </Field>
    @*<Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <Select Multiple="true" TValue="Guid" @bind-SelectedValue="@issueId">
                @foreach (var item in action_itemModel.ActionItem.TaskIssue)
                {
                    <SelectItem Value="@item.IssueId">@item.Issue.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <div>
            <Button Color="Color.Danger" Clicked="OnRemoveIssuesClick">Remove All</Button>
        </div>
    </Field>*@
</div>
    <div style="padding-top:1em; padding-bottom:2em;">
        <Button class="back-button" Color="Color.Dark" @onclick="ClickBack">Back</Button>
        @if (!success)
        {
            <Button class="save-button" Color="Color.Dark" @onclick="Save">Save</Button>
        }
        else
        {
            <Button class="save-button" Color="Color.Dark" @onclick="Save">Save Successful</Button>
        }
    </div>
</div>