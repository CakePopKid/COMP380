@page "/issues/{IssueId:guid}"
@page "/issues/create"
@using ProjectManagementSystem.Features.Issues
@using ProjectManagementSystem.Features.Issues.Models
@using ProjectManagementSystem.Features.Tasks.Models
@using ProjectManagementSystem.Features.ActionItems
@using ProjectManagementSystem.Features.Decisions
@using ProjectManagementSystem.Features.Tasks
@using ProjectManagementSystem.Data
@using ProjectManagementSystem.Features.Shared
@inject IssueService IssueService
@inject ActionItemService ActionItemService
@inject TaskService TaskService
@inject NavigationManager navigation
@inject ApplicationDbContext db
@inject DecisionService DecisionService 

@code{
    [Parameter]
    public Guid IssueId { get; set; }

    IssueModel issueModel = new IssueModel();
    Issue issue = new Issue();
    List<Issue> issues = new List<Issue>();
    List<ActionItem> actionItemList = new List<ActionItem>();
    List<ActionItem> actionItemTempList = new List<ActionItem>();
    List<ActionItem> issuesAssociatedToActionItem = new List<ActionItem>();
    List<Decision> decisionList = new List<Decision>();
    List<Decision> decisionTempList = new List<Decision>();
    List<Decision> decisionsWithIssueAssociation = new List<Decision>();

    Guid actionId;
    Guid decisionId;
    bool success;

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        if (IssueId != Guid.Empty)
        {
            issue = await IssueService.GetIssueById(IssueId);
            issuesAssociatedToActionItem = await ActionItemService.GetActionItemsByIssueId(IssueId);
            decisionsWithIssueAssociation = await DecisionService.GetDecisionsByIssueId(IssueId);
        }

        actionItemList = await ActionItemService.GetActionItemDataAsync();

        decisionList = await DecisionService.GetDecisionsDataAsync();
        CreateTempActionItemList();
        CreateTempDecisionList();
    }

    private void ValidateNameExists(ValidatorEventArgs n)
    {
        var name = Convert.ToString(n.Value);

        n.Status = string.IsNullOrEmpty(name) ? ValidationStatus.None : ValidationStatus.Success;
    }

    private void CreateTempActionItemList()
    {
        foreach(var actionItem in actionItemList)
        {
            if(actionItem.IssueId != IssueId)
            {
                actionItemTempList.Add(actionItem);
            }
        }
    }

    private void CreateTempDecisionList()
    {
        foreach(var decision in decisionList)
        {
            if(decision.IssueId != IssueId)
            {
                decisionTempList.Add(decision);
            }
        }
    }

    private void Save()
    {
        int entriesSaved = 0;

        // If the name is empty, we cannot save because it is required
        if (string.IsNullOrEmpty(issue.Name))
        {
            return;
        }
        else if (IssueId != Guid.Empty)
        {
            // Save edited changes
            entriesSaved = db.SaveChanges();
        }
        else
        {
            // Save new changes
            entriesSaved = IssueService.SaveIssue(issue);
        }

        if (entriesSaved > 0)
        {
            success = true;
        }
    }

    private void ClickBack()
    {
        navigation.NavigateTo("/issues");
    }

    private void OnAddActionItemClick()
    {
        // We do not want to add an empty guid
        if (actionId == Guid.Empty)
        {
            return;
        }

        var actionItem = actionItemTempList.Find(x => x.Id == actionId);
        actionItem.IssueId = IssueId;
        issuesAssociatedToActionItem.Add(actionItem);

        actionItemTempList.Remove(actionItem);

        actionId = Guid.Empty;
    }

    private void OnRemoveActionItemsClick()
    {
        foreach (var actionItem in issuesAssociatedToActionItem)
        {
            actionItemTempList.Add(actionItem);
        }

        for (int i = 0; i < actionItemList.Count; i++)
        {
            if (actionItemList[i].IssueId == IssueId)
            {
                actionItemList[i].IssueId = null;
            }
        }

        issuesAssociatedToActionItem.Clear();
    }

    private void OnAddDecisionClick()
    {
        // We do not want to add an empty guid
        if (decisionId == Guid.Empty)
        {
            return;
        }

        var decision = decisionTempList.Find(x => x.Id == decisionId);
        decision.IssueId = IssueId;
        decisionsWithIssueAssociation.Add(decision);

        decisionTempList.Remove(decision);

        actionId = Guid.Empty;
    }

    private void OnRemoveDecisonsClick()
    {
        foreach (var decision in decisionsWithIssueAssociation)
        {
            decisionTempList.Add(decision);
        }

        for(int i = 0; i < decisionList.Count; i++)
        {
            if(decisionList[i].IssueId == IssueId)
            {
                decisionList[i].IssueId = null;
            }
        }

        decisionsWithIssueAssociation.Clear();
    }
}

<div class="container-fluid">
    @if (IssueId != Guid.Empty)
    {
        <h1>Edit Issue</h1>
    }
    else
    {
        <h1>Create New Issue</h1>
    }

<div class="list-table">
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Name</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <Validation Validator="@ValidateNameExists">
                <TextEdit @bind-Text="@issue.Name">
                    <Feedback>
                        <ValidationNone>Name is required</ValidationNone>
                    </Feedback>
                </TextEdit>
            </Validation>
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Description</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit @bind-Text="@issue.Description" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Priority</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is2">
            <Select TValue="Priority" @bind-SelectedValue="@issue.Priority">
                <SelectItem Value=" issue.Priority">@issue.Priority</SelectItem>
                @if (Priority.Low != issue.Priority)
                {
                    <SelectItem Value="Priority.Low">@Priority.Low</SelectItem>
                }
                @if (Priority.Medium != issue.Priority)
                {
                    <SelectItem Value="Priority.Medium">@Priority.Medium</SelectItem>
                }
                @if (Priority.High != issue.Priority)
                {
                    <SelectItem Value="Priority.High">@Priority.High</SelectItem>
                }
            </Select>
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Severity</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is2">
            <Select TValue="Severity" @bind-SelectedValue="@issue.Severity">
                <SelectItem Value=" issue.Severity">@issue.Severity</SelectItem>
                @if (Severity.Minor != issue.Severity)
                {
                    <SelectItem Value="Severity.Minor">@Severity.Minor</SelectItem>
                }
                @if (Severity.Low != issue.Severity)
                {
                    <SelectItem Value="Severity.Low">@Severity.Low</SelectItem>
                }
                }
                @if (Severity.Medium != issue.Severity)
                {
                    <SelectItem Value="Severity.Medium">@Severity.Medium</SelectItem>
                }
                @if (Severity.High != issue.Severity)
                {
                    <SelectItem Value="Severity.High">@Severity.High</SelectItem>
                }
                @if (Severity.Critical != issue.Severity)
                {
                    <SelectItem Value="Severity.Critical">@Severity.Critical</SelectItem>
                }
            </Select>
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Date Raised</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is2">
            <DateEdit TValue="DateTime" @bind-Date="@issue.DateRaised" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Date Assigned</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is2">
            <DateEdit TValue="DateTime?" @bind-Date="@issue.DateAssigned" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Expected Completion Date</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" @bind-Date="@issue.ExpectedCompletionDate" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Actual Completion Date</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" @bind-Date="@issue.ActualCompletionDate" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Status</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is2">
            <Select TValue="IssueStatus" @bind-SelectedValue="@issue.Status">
                <SelectItem Value=" issue.Status">@issue.Status</SelectItem>
                @if (IssueStatus.Open != issue.Status)
                {
                    <SelectItem Value="IssueStatus.Open">@IssueStatus.Open</SelectItem>
                }
                @if (IssueStatus.Closed != issue.Status)
                {
                    <SelectItem Value="IssueStatus.Closed">@IssueStatus.Closed</SelectItem>
                }
                }
                @if (IssueStatus.InProgress != issue.Status)
                {
                    <SelectItem Value="IssueStatus.InProgress">@IssueStatus.InProgress</SelectItem>
                }
                @if (IssueStatus.Hold != issue.Status)
                {
                    <SelectItem Value="IssueStatus.Hold">@IssueStatus.Hold</SelectItem>
                }
                @if (IssueStatus.Complete != issue.Status)
                {
                    <SelectItem Value="IssueStatus.Complete">@IssueStatus.Complete</SelectItem>
                }
            </Select>
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Status Description</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <TextEdit @bind-Text="@issue.StatusDescription" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Update Date</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <DateEdit TValue="DateTime?" @bind-Date="@issue.UpdateDate" />
        </FieldBody>
    </Field>

    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Action Items</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <Select TValue="Guid" @bind-SelectedValue="@actionId">
                @if (actionId == Guid.Empty)
                {
                    <SelectItem Value="@actionId">Select...</SelectItem>
                }
                @foreach (var actionItem in actionItemTempList)
                {
                    <SelectItem Value="actionItem.Id">@actionItem.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <Button Color="Color.Primary" Clicked="OnAddActionItemClick">Add</Button>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <Select Multiple="true" TValue="Guid" @bind-SelectedValue="@actionId">
                @foreach (var item in issuesAssociatedToActionItem)
                {
                    <SelectItem Value="@item.IssueId">@item.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <div>
            <Button Color="Color.Danger" Clicked="OnRemoveActionItemsClick">Remove All</Button>
        </div>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Decisions</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <Select TValue="Guid" @bind-SelectedValue="@decisionId">
                @if (decisionId == Guid.Empty)
                {
                    <SelectItem Value="@decisionId">Select...</SelectItem>
                }
                @foreach (var decision in decisionTempList)
                {
                    <SelectItem Value="decision.Id">@decision.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <Button Color="Color.Primary" Clicked="OnAddDecisionClick">Add</Button>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <Select Multiple="true" TValue="Guid" @bind-SelectedValue="@decisionId">
                @foreach (var item in decisionsWithIssueAssociation)
                {
                    <SelectItem Value="@item.Id">@item.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <div>
            <Button Color="Color.Danger" Clicked="OnRemoveDecisonsClick">Remove All</Button>
        </div>
    </Field>
</div>
    <div style="padding-top:1em; padding-bottom:2em;">
        <Button class="back-button" Color="Color.Dark" @onclick="ClickBack">Back</Button>
        @if (!success)
        {
            <Button class="save-button" Color="Color.Dark" @onclick="Save">Save</Button>
        }
        else
        {
            <Button class="save-button" Color="Color.Dark" @onclick="Save">Save Successful</Button>
        }
    </div>
</div>













