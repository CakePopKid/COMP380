@page "/issues/{IssueId:guid}"
@page "/issues/create"
@using ProjectManagementSystem.Features.Issues.Models
@using ProjectManagementSystem.Features.Tasks.Models
@using ProjectManagementSystem.Features.ActionItems
@using ProjectManagementSystem.Features.Tasks
@using ProjectManagementSystem.Data
@using ProjectManagementSystem.Features.Shared
@inject IssueService IssueService
@inject TaskService TaskService
@inject NavigationManager navigation
@inject ApplicationDbContext db

@code{
    [Parameter]
    public Guid IssueId { get; set; } //The Id retrieved when Issue is clicked on

    Issue issue = new Issue(); //Associated Issues
    TaskModel taskModel = new TaskModel();
    IssueModel issueModel = new IssueModel(); //retrieves issueModel to have list of Items, Action-Items, and Decisions
    List<Issues.Issue> issues = new List<Issues.Issue>(); //Associated Issues
    List<Issue> issueTempList = new List<Issue>(); //Unassociated Issues

    Guid Id;
    Guid actionItemId;
    Guid decisionId;

    bool success;
    private string removeAllText = "<<";

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        if (Id != Guid.Empty)
        {
            issueModel = await IssueService.GetIssueById(Id);
        }
        issueTempList = await IssueService.GetIssuesDataAsync();
        CreateTempIssueLists();
    }

    private void ValidateNameExists(ValidatorEventArgs n)
    {
        var name = Convert.ToString(n.Value);

        n.Status = string.IsNullOrEmpty(name) ? ValidationStatus.None : ValidationStatus.Success;
    }

    private void CreateTempIssueLists()
    {
        for (var i = 0; i < issues.Count; i++)
        {
            TaskIssue associatedIssue = new TaskIssue();
            if (i < issueModel.Issue.TaskIssue.Count)
            {
                associatedIssue = issueModel.Issue.TaskIssue[i];
            }

            if (issues[i].Id != associatedIssue?.IssueId)
            {
                issueTempList.Add(issues[i]);
            }
        }
    }

    private void Save()
    {
        int entriesSaved = 0;

        // If the name is empty, we cannot save because it is required
        if (string.IsNullOrEmpty(issueModel.Issue.Name))
        {
            return;
        }
        else if (Id != Guid.Empty)
        {
            // Save edited changes
            entriesSaved = db.SaveChanges();
        }
        else
        {
            // Save new changes
            entriesSaved = IssueService.SaveIssue(issueModel.Issue);
        }

        if (entriesSaved > 0)
        {
            success = true;
        }
    }

    private void OnAddIssueClick()
    {
        // We do not want to add an empty guid
        if(Id == Guid.Empty)
        {
            return;
        }

        //Get issue from temp list
        var issue = issueTempList.Find(x => x.Id == Id);

        // Add the TaskIssue data to our Task.TaskIssue list
        taskModel.Task.TaskIssue.Add(new TaskIssue { TaskId = taskModel.Task.Id, Task = taskModel.Task, IssueId = Id, Issue = issue });

        // Remove the issue from our temp list because we don't want the user to add it again
        issueTempList.Remove(issue);

        // Set the issueId to empty so we display Select...
        Id = Guid.Empty;
    }

    private void OnRemoveIssuesClick()
    {
        var taskIssues = taskModel.Task.TaskIssue.ToList();

        foreach (var taskIssue in taskIssues)
        {
            issueTempList.Add(taskIssue.Issue);
            taskModel.Task.TaskIssue.Remove(taskIssue);
        }
    }

    private void ClickBack()
    {
        navigation.NavigateTo("/issues");
    }

    private void OnExpectedCompletionDateChange(DateTime? expectedDate)
    {
        //// Update duration on expected end date change
        //taskModel.Task.ExpectedEndDate = endDate;
        //if (taskModel.Task.ExpectedStartDate != null)
        //{
        //    var expectedTimeDifference = taskModel.Task.ExpectedEndDate.Value - taskModel.Task.ExpectedStartDate.Value;
        //    if ((int)expectedTimeDifference.TotalDays != 1)
        //    {
        //        taskModel.Task.ExpectedDuration = ((int)expectedTimeDifference.TotalDays).ToString() + " days";
        //    }
        //    else
        //    {
        //        taskModel.Task.ExpectedDuration = ((int)expectedTimeDifference.TotalDays).ToString() + " day";
        //    }
        //}
        //else
        //{
        //    taskModel.Task.ExpectedDuration = "0 days";
        //}
    }

    private void OnActualCompletionDateChange(DateTime? actualDate)
    {
        //// Update duration on actual end date change
        //taskModel.Task.ActualEndDate = endDate;
        //if (taskModel.Task.ActualStartDate != null)
        //{
        //    var actualTimeDifference = taskModel.Task.ActualEndDate.Value - taskModel.Task.ActualStartDate.Value;
        //    if ((int)actualTimeDifference.TotalDays != 1)
        //    {
        //        taskModel.Task.ActualDuration = ((int)actualTimeDifference.TotalDays).ToString() + " days";
        //    }
        //    else
        //    {
        //        taskModel.Task.ActualDuration = ((int)actualTimeDifference.TotalDays).ToString() + " day";
        //    }
        //}
        //else
        //{
        //    taskModel.Task.ActualDuration = "0 days";
        //}
    }
}

<div class="container-fluid">
    @if (IssueId != Guid.Empty)
    {
        <h1>Edit Resource</h1>
    }
    else
    {
        <h1>Create Resource</h1>
    }

<div class="list-table">
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Name</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <Validation Validator="@ValidateNameExists">
                <TextEdit @bind-Text="@issueModel.Issue.Name">
                    <Feedback>
                        <ValidationNone>Name is required</ValidationNone>
                    </Feedback>
                </TextEdit>
            </Validation>
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Description</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit @bind-Text="@issueModel.Issue.Description" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Priority</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit @bind-string="@issueModel.Issue.Priority" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Severity</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit @bind-string="@issueModel.Issue.Severity" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Date Raised</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" @bind-Date="@issueModel.Issue.DateRaised" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Date Assigned</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" @bind-Date="@issueModel.Issue.DateAssigned" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Expected Completion Date</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" Date="@issueModel.Issue.ExpectedCompletionDate" DateChanged="@OnExpectedCompletionDateChange" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Actual Completion Date</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" @bind-Date="@issueModel.Issue.ActualCompletionDate" DateChanged="@OnActualCompletionDateChange" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Status</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" @bind-Text="@issueModel.Issue.Status" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Status Description</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.IsAuto">
            <DateEdit TValue="DateTime?" @bind-Text="@issueModel.Issue.StatusDescription" />
        </FieldBody>
        <Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is2">Update Date</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.IsAuto">
                <DateEdit TValue="DateTime?" @bind-Date="@issueModel.Issue.DateRaised" />
            </FieldBody>
        </Field>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Issues</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <Select TValue="Guid" @bind-SelectedValue="@Id">
                @if (Id == Guid.Empty)
                {
                    <SelectItem Value="@Id">Select...</SelectItem>
                }
                @foreach (var issue in issueTempList)
                {
                    <SelectItem Value="issue.Id">@issue.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <Button Color="Color.Primary" Clicked="OnAddIssueClick">Add</Button>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2"></FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <Select Multiple="true" TValue="Guid" @bind-SelectedValue="@Id">
                @foreach (var item in taskModel.Task.TaskIssue)
                {
                    <SelectItem Value="@item.IssueId">@item.Issue.Name</SelectItem>
                }
            </Select>
        </FieldBody>
        <div>
            <Button Color="Color.Danger" Clicked="OnRemoveIssuesClick">Remove All</Button>
        </div>
    </Field>
</div>
    <div style="padding-top:1em; padding-bottom:2em;">
        <Button class="back-button" Color="Color.Dark" @onclick="ClickBack">Back</Button>
        @if (!success)
        {
            <Button class="save-button" Color="Color.Dark" @onclick="Save">Save</Button>
        }
        else
        {
            <Button class="save-button" Color="Color.Dark" @onclick="Save">Save Successful</Button>
        }
    </div>
</div>
