@page "/deliverables/{Id:guid}"
@page "/deliverables/create"
@using ProjectManagementSystem.Features.Deliverables.Models
@using ProjectManagementSystem.Features.Tasks
@using ProjectManagementSystem.Features.Requirements 
@using ProjectManagementSystem.Data
@using ProjectManagementSystem.Features.Shared
@using Blazorise.Components 
@inject DeliverableService DeliverableService
@inject TaskService TaskService 

@inject NavigationManager navigation
@inject ApplicationDbContext db


@code {
    //These are all global. Should not be the case
    [Parameter]
    public Guid Id { get; set; }    //this is the Id that comes in when a deliverable is selected

    DeliverableModel deliverableModel = new DeliverableModel(); //why doesnt my deliverableModel have list of tasks and requirements?
    List<Tasks.Task> tasks = new List<Tasks.Task>();    //Associated Tasks
    List<Tasks.Task> tempTasks = new List<Tasks.Task>();    //Unassociated Tasks
    List<Requirements.Requirement> requirements = new List<Requirements.Requirement>();

    Guid requirementId;
    Guid taskId;

    bool success;
    private string removeAllText = "<<";


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        //If Id is not empty, we know this is edit and we want to get the details
        if (Id != Guid.Empty)
        {
            deliverableModel = await DeliverableService.GetDeliverableById(Id); //Global Model becomes the requested deliv
        }
        //If Guid is empty, then you need to create a new deliverable class
        tempTasks = await TaskService.GetTasksDataAsync();  //tasks now is a list with all Available tasks

        //requirements = await RequirementService.GetRequirementsDataAsync();

        //Create temp lists to give user options to select for multi select features
        CreateTempTaskList();

    }

    private void CreateTempTaskList()
    {
        //IF I AM IN EDIT, I need a list of both the associated tasks AND the unassociated tasks.
        //First make a temp list for the dropdown list of tasks
        //tempTasks = tasks;
    }

    private void Save()
    {
        int entriesSaved = 0;
        // If the name is empty, we cannot save because it is required
        if (string.IsNullOrEmpty(deliverableModel.Deliverable.Name))
        {
            return;
        }
        else if (Id != Guid.Empty)
        {
            // Save edited changes
            entriesSaved = db.SaveChanges();
        }
        else
        {
            // Save new changes
            entriesSaved = DeliverableService.SaveDeliverable(deliverableModel.Deliverable);
        }

        if (entriesSaved > 0)
        {
            success = true;
        }
    }

    private void OnAddTaskClick()
    {
        if (taskId != Guid.Empty)
        //Clicking "Add Task" without selecting a task does nothing
        //Need to add selected task to the ListOfTasks
        {
            var selectedTask = tempTasks.Find(x => x.Id == taskId);
            tasks.Add(selectedTask);

            ////Remove from the temp list the task I just added
            tempTasks.Remove(selectedTask);
        }
    }

    private void OnAddTaskClick(Guid taskId)
    {
        if (taskId != Guid.Empty)
        //Clicking "Add Task" without selecting a task does nothing
        //Need to add selected task to the ListOfTasks
        {
            var selectedTask = tempTasks.Find(x => x.Id == taskId);
            tasks.Add(selectedTask);

            ////Remove from the temp list the task I just added
            tempTasks.Remove(selectedTask);
        }
    }

    private void OnRemoveTaskClick()
    {

    }

    private void OnNameChangeClick()
    {

    }

    private void ValidateNameExists(ValidatorEventArgs n)
    {
        var name = Convert.ToString(n.Value);

        n.Status = string.IsNullOrEmpty(name) ? ValidationStatus.None : ValidationStatus.Success;
    }

    private void OnDescriptionChangeClick()
    {

    }



    private void ClickBack()
    {
        navigation.NavigateTo("/deliverables");
    }
}

<div class="container-fluid">
    @if (Id != Guid.Empty)
    {
        <h1>@deliverableModel.Deliverable.Name</h1>   //I want to display the deliverable name here
        //<TextEdit Disabled="true" Plaintext="true" Size="Size.Large" @bind-Text="@deliverableModel.Deliverable.Name"></TextEdit>
        //<Divider Type="DividerType.TextContent" @bind-Text="deliverableModel.Deliverable.Name"></Divider>
    }
    else
    {
        <h1>Create Deliverable</h1>
    }

<div class="list-table">
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Name</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <Validation Validator="@ValidateNameExists">
                <TextEdit @bind-Text="@deliverableModel.Deliverable.Name">
                    <Feedback>
                        <ValidationNone>Name is required</ValidationNone>
                    </Feedback>
                </TextEdit>
            </Validation>
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Description</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <TextEdit @bind-Text="@deliverableModel.Deliverable.Description" />
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Due Date</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is10">
            <DateEdit TValue="DateTime?" @bind-Text="@deliverableModel.Deliverable.DueDate" />
        </FieldBody>
    </Field>
    @*<Field Horizontal="true">
            <FieldLabel ColumnSize="ColumnSize.Is2">Tasks</FieldLabel>
            <FieldBody ColumnSize="ColumnSize.Is3">
                <Select TValue="Guid" @bind-SelectedValue="@taskId">
                    @if (taskId == Guid.Empty)
                    {
                        <SelectItem Value="@taskId">Select...</SelectItem>
                    }
                    @foreach (var task in tempTasks)
                    {
                        <SelectItem Value="task.Id">@task.Name</SelectItem>
                    }
                </Select>
            </FieldBody>
            <Button Color="Color.Primary" Clicked="OnAddTaskClick">Add</Button>
        </Field>*@
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Tasks</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <Select Multiple="true" TValue="Guid" @bind-SelectedValue="@taskId">
                @foreach (var task in tempTasks)
                {
                    <SelectItem Value="task.Id">@task.Name</SelectItem>
                }
            </Select>
            <div style="padding-top:5px;">
                <Button Color="Color.Primary" Clicked="OnAddTaskClick">Add</Button>
            </div>
        </FieldBody>
    </Field>
    <Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Task Associations</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <Select Multiple="true" TValue="Guid" @bind-SelectedValue="@taskId">
                @foreach (var task in tasks)
                {
                    //taskId = task.Id;
                    //I need to use taskId for selections
                    <SelectItem Value="task.Id">@task.Name</SelectItem>
                }
            </Select>
            <div style="padding-top:5px;">
                <Button Color="Color.Danger" Clicked="OnRemoveTaskClick">Remove</Button>
            </div>
        </FieldBody>
    </Field>
    @*<Field Horizontal="true">
        <FieldLabel ColumnSize="ColumnSize.Is2">Unassociated Tasks</FieldLabel>
        <FieldBody ColumnSize="ColumnSize.Is3">
            <div class="multiple-selector">
                <ul class="selectable-ul">
                    @foreach (var task in tempTasks)
                    {
                        <li @onclick="@(OnAddTaskClick)">@task.Name</li>

                    }
                </ul>
                <div class="multiple-selector-buttons">
                    <button type="button" @onclick="SelectAll"></button>
                    <button type="button" @onclick="DeselectAll">@removeAllText</button>
                </div>
                <ul class="selectable-ul">
                    @foreach (var task in tasks)
                    {
                        <li @onclick="@OnRemoveTaskClick">@task.Name</li>
                    }
                </ul>
            </div>
        </FieldBody>
    </Field>*@
</div>
    <div style="padding-top:1em; padding-bottom:2em;">
        <Button class="back-button" Color="Color.Dark" @onclick="ClickBack">Back</Button>
        @if (!success)
        {
            <Button class="save-button" Color="Color.Dark" @onclick="Save">Save</Button>
        }
        else
        {
            <Button class="save-button" Color="Color.Dark" @onclick="Save">Save Successful</Button>
        }
    </div>
</div>