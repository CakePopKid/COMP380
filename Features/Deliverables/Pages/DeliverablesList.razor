@page "/deliverables"
@using Blazorise.DataGrid
@using ProjectManagementSystem.Features.Deliverables.Models
@using ProjectManagementSystem.Features.Tasks
@using ProjectManagementSystem.Features.Requirements
@using ProjectManagementSystem.Data
@inject DeliverableService DeliverableService
@inject TaskService TaskService
@inject RequirementService RequirementService 
@inject NavigationManager nav
@inject ApplicationDbContext db


@code {
    List<DeliverableListModel> deliverableListModelData = new List<DeliverableListModel>();


    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        deliverableListModelData = await DeliverableService.GetDeliverableListDataAsync();
    }

    private void OnEditClick(Guid deliverableId)
    {
        nav.NavigateTo("/deliverables/" + deliverableId);
    }

    private async void OnDeleteClick(Guid deliverableId)
    {
        var deliverableDelete = await DeliverableService.GetDeliverableById(deliverableId); //returns deliverable model
        DeliverableModel delivModel = new DeliverableModel();
        delivModel.AssociatedTasks = await TaskService.GetTaskByDeliverableId(deliverableId);
        delivModel.AssociatedRequirements = RequirementService.GetRequirementByDeliverableId(deliverableId);
        foreach (var task in delivModel.AssociatedTasks)
        {
            task.DeliverableId = null;
        }
        foreach (var requirement in delivModel.AssociatedRequirements)
        {
            requirement.DeliverableId = null;
        }
        db.Remove(deliverableDelete);
        var result = await db.SaveChangesAsync();
        if (result > 0)
        {
            // Need to get our new data and refresh the component since we just deleted something from the Grid
            deliverableListModelData = deliverableListModelData.FindAll(x => x.Id != deliverableId).ToList();
            StateHasChanged();  //updates blazorise page
        }
    }

    private void OnCreateDeliverableClick()
    {
        nav.NavigateTo("/deliverables/create");
    }

}


@if (this.deliverableListModelData == null)
{
    <h1>Loading...</h1>
}
else if (this.deliverableListModelData.Count == 0)
{
    <h1>There are no tasks</h1>
}

<div class="container-fluid">
    <h1>Deliverables List</h1>
    <div class="list-table">
        <DataGrid TItem="DeliverableListModel" Data="@deliverableListModelData" Sortable="true" Filterable="true" ShowPager="true" PageSize="20" Striped="true" Borderless="true" Bordered="true" Editable="true">
            <DataGridColumn TItem="DeliverableListModel" Field="@nameof(DeliverableListModel.Name)" Caption="Name"></DataGridColumn>
            <DataGridColumn TItem="DeliverableListModel" Field="@nameof(DeliverableListModel.DueDate)" Caption="Due Date"></DataGridColumn>
            <DataGridCommandColumn TItem="DeliverableListModel">
                <NewCommandTemplate Context="deliverable"></NewCommandTemplate>
                <EditCommandTemplate Context="deliverable"><Button Color="Color.Primary" Clicked="@(e=> OnEditClick(deliverable.Item.Id))">Edit</Button></EditCommandTemplate>
                <DeleteCommandTemplate Context="deliverable"><Button Color="Color.Danger" Clicked="@(e=> OnDeleteClick(deliverable.Item.Id))">Delete</Button></DeleteCommandTemplate>
            </DataGridCommandColumn>
        </DataGrid>
    </div>
    <div style="padding-top:1em;">
        <Button Clicked="@OnCreateDeliverableClick" Color="Color.Info">Create Deliverable</Button>
    </div>
</div>
